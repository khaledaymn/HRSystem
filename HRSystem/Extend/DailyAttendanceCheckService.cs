//using HRSystem.DataBase;
//using HRSystem.Models;
//using HRSystem.Services.AttendanceServices;

//namespace HRSystem.Extend
//{
//    public class DailyAttendanceCheckService : BackgroundService
//    {
//        private readonly IAttendanceServices _attendanceService;
//        private readonly ApplicationDbContext _context;
//        private readonly ILogger<DailyAttendanceCheckService> _logger;

//        public DailyAttendanceCheckService(ApplicationDbContext context,ILogger<DailyAttendanceCheckService> logger,IAttendanceServices attendanceService)
//        {
//            _context = context;
//            _logger = logger;
//            _attendanceService = attendanceService;
//        }

//        protected override async Task ExecuteAsync(CancellationToken stoppingToken)
//        {
//            _logger.LogInformation("DailyAttendanceCheckService started.");

//            while (!stoppingToken.IsCancellationRequested)
//            {
//                try
//                {
//                    // احسب الوقت المتبقي حتى الساعة 5:00 AM
//                    var now = DateTime.Now;
//                    var nextRun = now.Date.AddHours(5); // 5:00 AM اليوم
//                    if (now > nextRun)
//                    {
//                        nextRun = nextRun.AddDays(1); // لو الوقت عدى 5:00 AM، نروح لليوم التالي
//                    }

//                    var delay = nextRun - now;
//                    _logger.LogInformation("Next run scheduled at {NextRun}. Waiting for {Delay} minutes.", nextRun, delay.TotalMinutes);

//                    // انتظر حتى الوقت المحدد
//                    await Task.Delay(delay, stoppingToken);

//                    // نفذ المهمة
//                   // await ProcessDailyAttendanceAsync();
//                }
//                catch (Exception ex)
//                {
//                    _logger.LogError(ex, "Error occurred while running DailyAttendanceCheckService.");
//                }
//            }

//            _logger.LogInformation("DailyAttendanceCheckService stopped.");
//        }

//        //private async Task ProcessDailyAttendanceAsync()
//        //{
//        //    _logger.LogInformation("Running DailyAttendanceCheck at {Time}", DateTime.Now);

//        //    // التاريخ بتاع أمس
//        //    var yesterday = DateTime.Now.Date.AddDays(-1);

//        //    var employeesWithoutLeave = await _attendanceService.GetEmployeesWithoutLeave(yesterday);
//        //    await _attendanceService.MarkEmployeesWithoutLeave(employeesWithoutLeave, yesterday, _logger);

//        //    // 2. سجل الغياب للموظفين اللي ما حضروش أمس
//        //    // تحقق لو أمس كان إجازة رسمية
//        //    var isHoliday = await _holidayService.IsHolidayAsync(yesterday);
//        //    if (isHoliday)
//        //    {
//        //        _logger.LogInformation("Yesterday ({Date}) was a holiday. Skipping absence check.", yesterday);
//        //        return;
//        //    }

//        //    // جيب الموظفين اللي ما حضروش أمس
//        //    var absentEmployees = await _attendanceService.GetEmployeesWithoutAttendanceAsync(yesterday);

//        //    if (!absentEmployees.Any())
//        //    {
//        //        _logger.LogInformation("No absent employees found for {Date}.", yesterday);
//        //        return;
//        //    }

//        //    // تحقق من عدد الإجازات لكل موظف
//        //    var absencesToAdd = new List<Absence>();
//        //    foreach (var employeeId in absentEmployees)
//        //    {
//        //        var allowedLeaves = await _employeeService.GetAllowedLeavesAsync(employeeId);
//        //        var takenLeaves = await _employeeService.GetTakenLeavesAsync(employeeId, yesterday.AddMonths(-1), yesterday);

//        //        if (takenLeaves >= allowedLeaves)
//        //        {
//        //            // سجل غياب للموظف
//        //            absencesToAdd.Add(new Absence
//        //            {
//        //                EmployeeId = employeeId,
//        //                Date = yesterday,
//        //                Reason = "AutoGenerated - Exceeded allowed leaves"
//        //            });
//        //        }
//        //    }

//        //    if (absencesToAdd.Any())
//        //    {
//        //        _context.Absences.AddRange(absencesToAdd);
//        //        await _context.SaveChangesAsync();
//        //        _logger.LogInformation("Recorded {Count} absences for {Date}.", absencesToAdd.Count, yesterday);
//        //    }
//        //    else
//        //    {
//        //        _logger.LogInformation("No absences recorded for {Date}.", yesterday);
//        //    }

//        //    _logger.LogInformation("DailyAttendanceCheck completed successfully.");
//        //}
//    }
//}
