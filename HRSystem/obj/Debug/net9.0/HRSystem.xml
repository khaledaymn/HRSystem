<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HRSystem</name>
    </assembly>
    <members>
        <member name="M:HR_System_API.Controllers.AttendanceController.AddAttendance(HRSystem.DTO.AttendanceDto)">
            <summary>
            Records attendance for an employee.
            This endpoint allows a user to submit attendance details, including time and location, for an employee.
            </summary>
            <remarks>
            This endpoint requires user privileges and expects a valid JSON payload conforming to the <see cref="T:HRSystem.DTO.AttendanceDto"/> structure.
            It performs validation on the input data and returns a success message with the employee ID if the attendance is recorded successfully, or an error if the operation fails.
            </remarks>
            <param name="attendanceDto">
            The attendance data to record, provided in the request body as an <see cref="T:HRSystem.DTO.AttendanceDto"/> object.
            <para><strong>Example Request:</strong></para>
            <code>
            POST /Attendance/TakeAttendance
            {
                "timeOfAttend": "2025-03-24T08:30:00Z",
                "latitude": 40.7128,
                "longitude": -74.0060,
                "employeeId": "123e4567-e89b-12d3-a456-426614174000",
                "branch": "Main branch"
            }
            </code>
            </param>
            <returns>
            Returns an <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> containing the result of the attendance recording process.
            On success, it returns HTTP 201 (Created) with the employee ID and a success message.
            On failure, it returns appropriate error codes with descriptive messages.
            </returns>
            <response code="201">
            Successfully recorded the attendance. Returns the employee ID and a confirmation message.
            Example Response:
            <code>
            {
                "employeeId": "123e4567-e89b-12d3-a456-426614174000",
                "message": "Attendance added successfully."
            }
            </code>
            </response>
            <response code="400">
            Bad Request. Returned when the input data is invalid or fails validation.
            Example Response (Validation Error):
            <code>
            {
                "timeOfAttend": ["Time of attendance is required."],
                "latitude": ["Latitude must be between -90 and 90."]
            }
            </code>
            Example Response (Business Logic Error):
            <code>
            {
                "success": false,
                "message": "Employee ID does not exist."
            }
            </code>
            </response>
            <response code="401">
            Unauthorized. Returned when the caller is not authenticated.
            Example Response:
            <code>
            {
                "message": "Authentication required. Please provide a valid token."
            }
            </code>
            </response>
            <response code="403">
            Forbidden. Returned when the caller lacks user privileges.
            Example Response:
            <code>
            {
                "message": "Access denied. User role required."
            }
            </code>
            </response>
            <response code="500">
            Server Error. Returned when an unexpected error occurs during attendance recording.
            Example Response (Generic Error):
            <code>
            {
                "success": false,
                "message": "An internal server error occurred."
            }
            </code>
            Example Response (Detailed Error):
            <code>
            {
                "success": false,
                "message": "Error adding attendance. Please try again later.",
                "error": "Database timeout occurred",
                "timestamp": "2025-03-24T08:35:00Z"
            }
            </code>
            </response>
            <exception cref="T:System.Exception">Thrown when an unexpected error occurs (e.g., database failure). Caught and returned as a 500 response with error details.</exception>
        </member>
        <member name="M:HR_System_API.Controllers.AttendanceController.GetAttendances">
            <summary>
            Retrieves all attendance and leave records in the system.
            This endpoint allows an admin to fetch a list of attendance records, including leave details, for all employees.
            </summary>
            <remarks>
            This endpoint requires admin privileges and does not require any parameters.
            It returns a collection of attendance records with leave details if available, or an error message if no records are found.
            </remarks>
            <returns>
            Returns an <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> containing the result of the attendance retrieval process.
            On success, it returns HTTP 200 (OK) with a list of attendance records.
            On failure, it returns appropriate error codes with descriptive messages.
            </returns>
            <response code="200">
            Successfully retrieved the attendance and leave records. Returns a list of records.
            Example Response:
            <code>
            [
                {
                    "timeOfAttend": "2025-03-24T08:30:00",
                    "timeOfLeave": "2025-03-24T17:00:00",
                    "latitudeOfAttend": 40.7128,
                    "latitudeOfLeave": 40.7130,
                    "longitudeOfAttend": -74.0060,
                    "longitudeOfLeave": -74.0058,
                    "employeeName": "John Doe",
                    "employeeId": "123e4567-e89b-12d3-a456-426614174000",
                    "branch": "New York"
                },
                {
                    "timeOfAttend": "2025-03-24T09:00:00",
                    "timeOfLeave": null,
                    "latitudeOfAttend": 51.5074,
                    "latitudeOfLeave": null,
                    "longitudeOfAttend": -0.1278,
                    "longitudeOfLeave": null,
                    "employeeName": "Jane Smith",
                    "employeeId": "987fcdeb-12ab-34cd-e567-890123456789",
                    "branch": "London"
                }
            ]
            </code>
            </response>
            <response code="401">
            Unauthorized. Returned when the caller is not authenticated.
            Example Response:
            <code>
            {
                "message": "Authentication required. Please provide a valid token."
            }
            </code>
            </response>
            <response code="403">
            Forbidden. Returned when the caller lacks admin privileges.
            Example Response:
            <code>
            {
                "message": "Access denied. Admin role required."
            }
            </code>
            </response>
            <response code="404">
            Not Found. Returned when no attendance records are available.
            Example Response:
            <code>
            {
                "success": false,
                "message": "No attendance records found for date."
            }
            </code>
            </response>
            <response code="500">
            Server Error. Returned when an unexpected error occurs during retrieval.
            Example Response (Generic Error):
            <code>
            {
                "success": false,
                "message": "An error occurred while retrieving attendance records",
                "error": "Database connection failed"
            }
            </code>
            Example Response (Detailed Error):
            <code>
            {
                "success": false,
                "message": "An error occurred while retrieving attendance records",
                "error": "Query timeout occurred",
                "timestamp": "2025-03-24T10:00:00Z"
            }
            </code>
            </response>
        </member>
        <member name="M:HR_System_API.Controllers.AttendanceController.GetEmployeeAttendances(System.String)">
            <summary>
            Retrieves attendance and leave records for a specific employee.
            This endpoint allows an admin or user to fetch all attendance and leave records associated with a given employee ID.
            </summary>
            <remarks>
            This endpoint requires either admin or user privileges and expects a valid employee ID as a route parameter.
            It returns a list of attendance records if found, or an error message if the employee ID is invalid, no records exist, or an issue occurs.
            </remarks>
            <param name="empId">
            The unique identifier of the employee whose attendance records are to be retrieved (e.g., a GUID or string-based ID).
            <para><strong>Example Request:</strong></para>
            <code>
            GET /AttendanceAndLeave/123e4567-e89b-12d3-a456-426614174000
            </code>
            </param>
            <returns>
            Returns an <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> containing the result of the attendance retrieval process.
            On success, it returns HTTP 200 (OK) with a list of attendance records.
            On failure, it returns appropriate error codes with descriptive messages.
            </returns>
            <response code="200">
            Successfully retrieved the employeeâ€™s attendance and leave records. Returns a list of records.
            Example Response:
            <code>
            {
                "success": true,
                "data": [
                    {
                        "timeOfAttend": "2025-03-24T08:30:00",
                        "timeOfLeave": "2025-03-24T17:00:00",
                        "latitudeOfAttend": 40.7128,
                        "latitudeOfLeave": 40.7130,
                        "longitudeOfAttend": -74.0060,
                        "longitudeOfLeave": -74.0058,
                        "employeeName": "John Doe",
                        "employeeId": "123e4567-e89b-12d3-a456-426614174000",
                        "branch": "New York"
                    },
                    {
                        "timeOfAttend": "2025-03-25T08:45:00",
                        "timeOfLeave": null,
                        "latitudeOfAttend": 40.7129,
                        "latitudeOfLeave": null,
                        "longitudeOfAttend": -74.0061,
                        "longitudeOfLeave": null,
                        "employeeName": "John Doe",
                        "employeeId": "123e4567-e89b-12d3-a456-426614174000",
                        "branch": "New York"
                    }
                ]
            }
            </code>
            </response>
            <response code="400">
            Bad Request. Returned when the employee ID is invalid or missing.
            Example Response (Validation Error):
            <code>
            {
                "success": false,
                "message": "Employee ID is required."
            }
            </code>
            Example Response (Business Logic Error):
            <code>
            {
                "success": false,
                "message": "Invalid employee ID format."
            }
            </code>
            </response>
            <response code="401">
            Unauthorized. Returned when the caller is not authenticated.
            Example Response:
            <code>
            {
                "message": "Authentication required. Please provide a valid token."
            }
            </code>
            </response>
            <response code="403">
            Forbidden. Returned when the caller lacks sufficient privileges (neither admin nor user role).
            Example Response:
            <code>
            {
                "message": "Access denied. Admin or User role required."
            }
            </code>
            </response>
            <response code="404">
            Not Found. Returned when no attendance records are found for the given employee.
            Example Response:
            <code>
            {
                "success": false,
                "message": "No attendance records found for the given employee."
            }
            </code>
            </response>
            <response code="500">
            Server Error. Returned when an unexpected error occurs during retrieval.
            Example Response (Generic Error):
            <code>
            {
                "success": false,
                "message": "An internal server error occurred."
            }
            </code>
            Example Response (Detailed Error):
            <code>
            {
                "success": false,
                "message": "An internal server error occurred.",
                "error": "Database query failed due to timeout",
                "timestamp": "2025-03-24T09:00:00Z"
            }
            </code>
            </response>
        </member>
        <member name="M:HRSystem.Controllers.AuthenticationController.Login(HRSystem.DTO.AuthenticationDTOs.LoginDTO)">
            <summary>
            Authenticates a user and returns authentication details including a token if successful.
            </summary>
            <param name="model">The login data transfer object containing the user's email and password.</param>
            <returns>
            Returns an authentication result with a token if successful, or an error message if authentication fails.
            </returns>
            <remarks>
            This endpoint validates the user's credentials and returns an authentication token if the login is successful.
            The request body must contain a valid email and password.
            
            Example Request:
            ```json
            {
              "email": "user@example.com",
              "password": "P@ssw0rd123"
            }
            ```
            </remarks>
            <response code="200">
            Returns the authentication details including token when login is successful.
            Successful Response (200 OK):
            ```json
            {
              "message": "Login successful",
              "id": "12345",
              "name": "John Doe",
              "email": "user@example.com",
              "phoneNumber": "123-456-7890",
              "address": "123 Main St",
              "nationalId": "ABC123456",
              "baseSalary": 50000.0,
              "shift": [
                {
                  "id": 1,
                  "startTime": "08:00",
                  "endTime": "16:00",
                  "employeeId": "12345"
                }
              ],
              "gender": "Male",
              "branch": {
                "id": 1,
                "name": "Main Branch",
                "latitude": 40.7128,
                "longitude": -74.0060
              },
              "hiringDate": "2023-01-15",
              "dateOfBarth": "1990-05-20",
              "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
              "roles": ["User"]
            }
            </response>
            ```
            <response code="400">
            Returned when the login credentials are invalid or the request is malformed.
            Bad Request Response (400):
            ```json
            {
              "message": "Invalid email or password"
            }
            </response>
            <response code="500">
            Returned when an unexpected server error occurs during processing.
            ```
            Server Error Response (500):
            ```json
            {
              "message": "An error occurred while processing your request",
              "error": "Exception details here"
            }
            ```
            </response>
        </member>
        <member name="M:HRSystem.Controllers.AuthenticationController.ForgetPassword(HRSystem.DTO.AuthenticationDTOs.ForgetPasswordDTO)">
            <summary>
            Initiates a password reset process for a user based on their email.
            </summary>
            <param name="model">The forget password data transfer object containing the user's email.</param>
            <returns>
            Returns a success message if the request is processed successfully, or an error message if it fails.
            </returns>
            <remarks>
            This endpoint triggers a password reset process for the specified email. If the email exists, a reset link or code will be sent.
            The request body must contain a valid email.
            
            Example Request:
            ```json
            {
              "email": "user@example.com"
            }
            ```
            </remarks>
            <response code="200">
            Returns a success message when the forget password request is processed successfully.
            ```json
            "success"
            ```
            </response>
            <response code="400">
            Returned when the request model is invalid or malformed.
            ```json
            {
              "email": [
                "The Email field is required."
              ]
            }
            ```
            </response>
            <response code="404">
            Returned when the email is not found or the forget password process fails.
            ```json
            "Email not found"
            ```
            </response>
            <response code="500">
            Returned when an unexpected server error occurs during processing.
            ```json
            {
              "message": "An error occurred while processing your request",
              "error": "Exception details here"
            }
            ```
            </response>
        </member>
        <member name="M:HRSystem.Controllers.AuthenticationController.ResetPassword(HRSystem.DTO.AuthenticationDTOs.ResetPasswordDTO)">
            <summary>
            Resets a user's password using provided credentials and returns authentication details if successful.
            </summary>
            <param name="model">The reset password data transfer object containing the user's email, reset token, and new password.</param>
            <returns>
            Returns an authentication result with a token if the reset is successful, or an error message if it fails.
            </returns>
            <remarks>
            This endpoint validates the reset token and updates the user's password. The request body must contain a valid email, reset token, and new password.
            
            Example Request:
            ```json
            {
              "email": "user@example.com",
              "token": "reset-token-123",
              "newPassword": "NewP@ssw0rd123"
            }
            ```
            </remarks>
            <response code="200">
            Returns the authentication details including token when the password reset is successful.
            ```json
            {
              "message": "Password reset successful",
              "id": "12345",
              "name": "John Doe",
              "email": "user@example.com",
              "phoneNumber": "123-456-7890",
              "address": "123 Main St",
              "nationalId": "ABC123456",
              "baseSalary": 50000.0,
              "shift": [
                {
                  "id": 1,
                  "startTime": "08:00",
                  "endTime": "16:00",
                  "employeeId": "12345"
                }
              ],
              "gender": "Male",
              "branch": {
                "id": 1,
                "name": "Main Branch",
                "latitude": 40.7128,
                "longitude": -74.0060
              },
              "hiringDate": "2023-01-15",
              "dateOfBarth": "1990-05-20",
              "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
              "roles": ["User"]
            }
            ```
            </response>
            <response code="400">
            Returned when the request model is invalid or malformed.
            ```json
            {
              "email": [
                "The Email field is required."
              ],
              "newPassword": [
                "The NewPassword field is required."
              ]
            }
            ```
            </response>
            <response code="404">
            Returned when the reset token is invalid or the email is not found.
            ```json
            "Invalid token or email"
            ```
            </response>
            <response code="500">
            Returned when an unexpected server error occurs during processing.
            ```json
            {
              "message": "An error occurred while resetting your password",
              "error": "Exception details here"
            }
            ```
            </response>        
        </member>
        <member name="M:HRSystem.Controllers.BranchsController.GetAllBranches">
            <summary>
            Retrieves a list of all branches in the system.
            </summary>
            <returns>
            Returns a list of branch details if successful, or an error message if the operation fails.
            </returns>
            <remarks>
            This endpoint retrieves all branches available in the system. It requires Admin role authorization.
            No request body is needed as itâ€™s a GET request.
            </remarks>
            <response code="200">
            Returns a list of all branches when the request is successful.
            ```json
            [
              {
                "id": 1,
                "name": "Main Branch",
                "latitude": 40.7128,
                "longitude": -74.0060
              },
              {
                "id": 2,
                "name": "Downtown Branch",
                "latitude": 34.0522,
                "longitude": -118.2437
              }
            ]
            ```
            </response>
            <response code="401">
            Returned when the user is not authenticated or lacks Admin role authorization.
            ```json
            {
              "message": "Unauthorized"
            }
            ```
            </response>
            <response code="500">
            Returned when an unexpected server error occurs during processing or if the branch service returns null.
            ```json
            {
              "message": "An error occurred while retrieving branches.",
              "error": "Exception details here"
            }
            ```
            </response>
        </member>
        <member name="M:HRSystem.Controllers.BranchsController.GetBranchById(System.Int32)">
            <summary>
            Retrieves the details of a specific branch by its ID.
            </summary>
            <param name="id">The unique identifier of the branch to retrieve.</param>
            <returns>
            Returns the branch details if found, or an error message if the branch does not exist or the operation fails.
            </returns>
            <remarks>
            This endpoint retrieves a single branch based on the provided ID. The ID must be a valid integer.
            </remarks>
            <response code="200">
            Returns the branch details when the request is successful.
            ```json
            {
              "id": 1,
              "name": "Main Branch",
              "latitude": 40.7128,
              "longitude": -74.0060
            }
            ```
            </response>
            <response code="404">
            Returned when the branch with the specified ID is not found.
            ```json
            {
              "message": "Branch with ID 1 not found."
            }
            ```
            </response>
            <response code="500">
            Returned when an unexpected server error occurs during processing.
            ```json
            {
              "message": "An error occurred while retrieving the branch.",
              "error": "Exception details here"
            }
            ```
            </response>
        </member>
        <member name="M:HRSystem.Controllers.BranchsController.CreateBranch(HRSystem.DTO.BranchDTOs.AddBranchDTO)">
            <summary>
            Creates a new branch in the system.
            </summary>
            <param name="branchDto">The data transfer object containing the details of the branch to create.</param>
            <returns>
            Returns the created branch details with its ID if successful, or an error message if the operation fails.
            </returns>
            <remarks>
            This endpoint creates a new branch and requires Admin role authorization. The request body must contain valid branch details.
            
            Example Request:
            ```json
            {
              "name": "New Branch",
              "latitude": 37.7749,
              "longitude": -122.4194
            }
            ```
            </remarks>
            <response code="201">
            Returns the created branch details when the request is successful.
            ```json
            {
              "id": 3,
              "name": "New Branch",
              "latitude": 37.7749,
              "longitude": -122.4194
            }
            ```
            </response>
            <response code="401">
            Returned when the user is not authenticated or lacks Admin role authorization.
            ```json
            {
              "message": "Unauthorized"
            }
            ```
            </response>
            <response code="500">
            Returned when an unexpected server error occurs during processing or if branch creation returns null.
            ```json
            {
              "message": "An error occurred while creating the branch.",
              "error": "Exception details here"
            }
            ```
            </response>
        </member>
        <member name="M:HRSystem.Controllers.BranchsController.UpdateBranch(HRSystem.DTO.BranchDTOs.BranchDTO)">
            <summary>
            Updates an existing branch in the system.
            </summary>
            <param name="branchDto">The data transfer object containing the updated branch details.</param>
            <returns>
            Returns a success message and the updated branch if successful, or an error message if the branch is not found or the operation fails.
            </returns>
            <remarks>
            This endpoint updates a branch based on the provided details. The request body must contain a valid branch ID and updated fields.
            
            Example Request:
            ```json
            {
              "id": 1,
              "name": "Updated Main Branch",
              "latitude": 40.7128,
              "longitude": -74.0060
            }
            ```
            </remarks>
            <response code="200">
            Returns a success message and the updated branch details when the request is successful.
            ```json
            {
              "message": "Successfully updated branch",
              "updatedBranch": {
                "id": 1,
                "name": "Updated Main Branch",
                "latitude": 40.7128,
                "longitude": -74.0060
              }
            }
            ```
            </response>
            <response code="404">
            Returned when the branch with the specified ID is not found.
            ```json
            {
              "message": "Branch with ID 1 not found."
            }
            ```
            </response>
            <response code="500">
            Returned when an unexpected server error occurs during processing.
            ```json
            {
              "message": "An error occurred while updating the branch.",
              "error": "Exception details here"
            }
            ```
            </response>
        </member>
        <member name="M:HRSystem.Controllers.BranchsController.DeleteBranch(System.Int32)">
            <summary>
            Deletes a branch from the system by its ID.
            </summary>
            <param name="id">The unique identifier of the branch to delete.</param>
            <returns>
            Returns a success message if the branch is deleted, or an error message if the branch is not found or the operation fails.
            </returns>
            <remarks>
            This endpoint deletes a branch based on the provided ID.
            </remarks>
            <response code="200">
            Returns a success message when the branch is deleted successfully.
            ```json
            "Successfully deleted branch"
            ```
            </response>
            <response code="404">
            Returned when the branch with the specified ID is not found.
            ```json
            {
              "message": "Branch with ID 1 not found."
            }
            ```
            </response>
            <response code="500">
            Returned when an unexpected server error occurs during processing.
            ```json
            {
              "message": "An error occurred while deleting the branch.",
              "error": "Exception details here"
            }
            ```
            </response>
        </member>
        <member name="M:HRSystem.Controllers.LeaveController.AddLeave(HRSystem.DTO.LeaveDTO)">
            <summary>
            Adds a new leave request for an employee in the system.
            This endpoint allows recording an employee's leave request by providing details such as the leave dates and employee ID.
            </summary>
            <param name="leaveDto">
            The data required to record a leave request (as defined in LeaveDTO).
            Example Request (LeaveDTO):
            <code>
            {
                "employeeId": "EMP12345",
                "startDate": "2025-04-01T00:00:00Z",
                "endDate": "2025-04-05T00:00:00Z",
                "reason": "Vacation"
            }
            </code>
            </param>
            <returns>
            Returns an <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> indicating the result of the leave addition operation.
            </returns>
            <response code="201">
            Leave recorded successfully. Returns the employee ID and a success message.
            Example Response (Success):
            <code>
            {
                "employeeId": "EMP12345",
                "message": "Leave added successfully."
            }
            </code>
            </response>
            <response code="400">
            Bad request. Returned when the provided model is invalid (e.g., missing required fields or invalid dates).
            Example Response (Invalid Model):
            <code>
            {
                "errors": {
                    "StartDate": ["The start date is required."],
                    "EndDate": ["The end date must be after the start date."]
                }
            }
            </code>
            </response>
            <response code="500">
            Server error. Returned when an unexpected error occurs or if leave recording fails.
            Example Response (Operation Failed):
            <code>
            "Error adding leave."
            </code>
            Example Response (Server Error):
            <code>
            "An internal server error occurred."
            </code>
            </response>
        </member>
        <member name="M:HRSystem.Controllers.OfficialVacationsController.AddOfficialVacationAsync(HRSystem.DTO.OfficialVacationDTOs.CreateOfficialVacationDTO)">
            <summary>
            Adds a new official vacation to the system.
            This endpoint allows an admin to create an official vacation by providing the necessary details.
            </summary>
            <param name="vacation">
            The official vacation details, including the name and date.
            Example Request:
            <code>
            {
                "vacationName": "Christmas Day",
                "vacationDay": "2025-12-25T00:00:00"
            }
            </code>
            </param>
            <returns>
            Returns an <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> indicating the result of the vacation creation operation.
            </returns>
            <response code="201">
            Official vacation added successfully. Returns a confirmation message.
            Example Response (Success):
            <code>
            {
                "success": true,
                "message": "Official vacation added successfully."
            }
            </code>
            </response>
            <response code="400">
            Bad request. Returned when the provided model is invalid (e.g., missing required fields like vacation name or date).
            Example Response (Failure):
            <code>
            {
                "vacationName": [
                    "Vacation name is required"
                ],
                "vacationDay": [
                    "Vacation day is required"
                ]
            }
            </code>
            </response>
            <response code="401">
            Unauthorized. Returned when the caller is not authenticated.
            </response>
            <response code="403">
            Forbidden. Returned when the caller is not an admin.
            </response>
            <response code="500">
            Server error. Returned when an unexpected error occurs on the server.
            Example Response (Server Error):
            <code>
            {
                "success": false,
                "message": "An error occurred while adding the official vacation."
            }
            </code>
            </response>
        </member>
        <member name="M:HRSystem.Controllers.OfficialVacationsController.GetAllOfficialVacation">
            <summary>
            Retrieves all official vacations from the system.
            This endpoint allows an admin to retrieve a list of all official vacations stored in the system.
            Example Request:
            <code>
            GET ~/OfficialVacations/GetAll
            </code>
            </summary>
            <returns>
            Returns an <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> containing the list of official vacations or an appropriate status code.
            </returns>
            <response code="200">
            Successfully retrieved the list of official vacations.
            Example Response (Success):
            <code>
            [
                {
                    "id": 1,
                    "vacationName": "Christmas Day",
                    "vacationDay": "2025-12-25T00:00:00"
                },
                {
                    "id": 2,
                    "vacationName": "New Year's Day",
                    "vacationDay": "2026-01-01T00:00:00"
                }
            ]
            </code>
            </response>
            <response code="204">
            No official vacations found in the system.
            </response>
            <response code="401">
            Unauthorized. Returned when the caller is not authenticated.
            </response>
            <response code="403">
            Forbidden. Returned when the caller is not an admin.
            </response>
            <response code="500">
            Server error. Returned when an unexpected error occurs on the server.
            Example Response (Server Error):
            <code>
            {
                "success": false,
                "message": "An error occurred while retrieving official vacations."
            }
            </code>
            </response>
        </member>
        <member name="M:HRSystem.Controllers.OfficialVacationsController.GetOfficialVacationByIdAsync(System.Int32)">
            <summary>
            Retrieves an official vacation by its ID.
            This endpoint allows an admin to retrieve the details of a specific official vacation by providing its ID.
            </summary>
            <param name="id">The ID of the official vacation to retrieve.</param>
            <returns>
            Returns an <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> containing the official vacation details or an appropriate status code.
            </returns>
            <response code="200">
            Successfully retrieved the official vacation.
            Example Response (Success):
            <code>
            {
                "id": 1,
                "vacationName": "Christmas Day",
                "vacationDay": "2025-12-25T00:00:00"
            }
            </code>
            </response>
            <response code="404">
            Official vacation not found.
            Example Response (Not Found):
            <code>
            "No vacation found with ID 1."
            </code>
            </response>
            <response code="401">
            Unauthorized. Returned when the caller is not authenticated.
            </response>
            <response code="403">
            Forbidden. Returned when the caller is not an admin.
            </response>
            <response code="500">
            Server error. Returned when an unexpected error occurs on the server.
            Example Response (Server Error):
            <code>
            {
                "success": false,
                "message": "An error occurred while retrieving the official vacation."
            }
            </code>
            </response>
        </member>
        <member name="M:HRSystem.Controllers.OfficialVacationsController.UpdateOfficialVacationAsync(HRSystem.DTO.OfficialVacationDTOs.OfficialVacationDTO)">
            <summary>
            Updates an existing official vacation by its ID.
            This endpoint allows an admin to update the details of a specific official vacation by providing its ID and updated details.
            </summary>
            <param name="id">The ID of the official vacation to update.</param>
            <param name="vacation">
            The updated official vacation details, including the ID, name, and date (as defined in <see cref="T:HRSystem.DTO.OfficialVacationDTOs.OfficialVacationDTO"/>).
            Example Request:
            <code>
            PUT ~/OfficialVacations/Edit/1
            {
                "id": 1,
                "vacationName": "Updated Christmas Day",
                "vacationDay": "2025-12-25T00:00:00"
            }
            </code>
            </param>
            <returns>
            Returns an <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> containing the updated official vacation details or an appropriate status code.
            </returns>
            <response code="200">
            Successfully updated the official vacation.
            Example Response (Success):
            <code>
            {
                "id": 1,
                "vacationName": "Updated Christmas Day",
                "vacationDay": "2025-12-25T00:00:00"
            }
            </code>
            </response>
            <response code="400">
            Bad request. Returned when the ID in the route does not match the ID in the body, or the model is invalid.
            Example Response (ID Mismatch):
            <code>
            "ID mismatch between route and body."
            </code>
            Example Response (Invalid Model):
            <code>
            {
                "vacationName": [
                    "Vacation name is required"
                ],
                "vacationDay": [
                    "Vacation day is required"
                ]
            }
            </code>
            </response>
            <response code="404">
            Official vacation not found.
            Example Response (Not Found):
            <code>
            "Official vacation with ID 1 not found."
            </code>
            </response>
            <response code="401">
            Unauthorized. Returned when the caller is not authenticated.
            </response>
            <response code="403">
            Forbidden. Returned when the caller is not an admin.
            </response>
            <response code="500">
            Server error. Returned when an unexpected error occurs on the server.
            Example Response (Server Error):
            <code>
            {
                "success": false,
                "message": "An error occurred while updating the official vacation."
            }
            </code>
            </response>
        </member>
        <member name="M:HRSystem.Controllers.OfficialVacationsController.DeleteOfficialVacationAsync(System.Int32)">
            <summary>
            Deletes an official vacation by its ID.
            This endpoint allows an admin to delete a specific official vacation by providing its ID.
            </summary>
            <param name="id">
            The ID of the official vacation to delete.
            </param>
            <returns>
            Returns an <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> indicating the result of the deletion operation.
            </returns>
            <response code="204">
            Official vacation deleted successfully.
            </response>
            <response code="404">
            Official vacation not found.
            Example Response (Not Found):
            <code>
            "No vacation found with ID 1."
            </code>
            </response>
            <response code="401">
            Unauthorized. Returned when the caller is not authenticated.
            </response>
            <response code="403">
            Forbidden. Returned when the caller is not an admin.
            </response>
            <response code="500">
            Server error. Returned when an unexpected error occurs on the server.
            Example Response (Server Error):
            <code>
            {
                "success": false,
                "message": "An error occurred while deleting the official vacation."
            }
            </code>
            </response>
        </member>
        <member name="M:HRSystem.Controllers.OfficialVacationsController.IsOfficialVacationAsync(System.DateTime)">
            <summary>
            Checks if a specific date is an official vacation.
            This endpoint allows an admin to check if a given date is marked as an official vacation in the system.
            </summary>
            <param name="date">
            The date to check (in ISO 8601 format, e.g., "2025-12-25T00:00:00").
            <code>
            Example Request:
            GET /api/official-vacations/check?date=2025-12-25T00:00:00
            </code>
            </param>
            <returns>
            Returns an <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> indicating whether the specified date is an official vacation.
            </returns>
            <response code="200">
            Successfully checked the date.
            Example Response (Is Vacation):
            <code>
            {
                "date": "2025-12-25T00:00:00",
                "isVacation": true
            }
            </code>
            Example Response (Not a Vacation):
            <code>
            {
                "date": "2025-12-26T00:00:00",
                "isVacation": false
            }
            </code>
            </response>
            <response code="401">
            Unauthorized. Returned when the caller is not authenticated.
            </response>
            <response code="403">
            Forbidden. Returned when the caller is not an admin.
            </response>
            <response code="500">
            Server error. Returned when an unexpected error occurs on the server.
            Example Response (Server Error):
            <code>
            {
                "success": false,
                "message": "An error occurred while checking the official vacation."
            }
            </code>
            </response>
        </member>
        <member name="M:HRSystem.Controllers.RoleController.Create(HRSystem.DTO.RoleDTOs.RoleCreateDTO)">
            <summary>
            Creates a new role in the system.
            This endpoint allows an admin or authorized user to create a new role by providing the role name.
            </summary>
            <param name="model">
            The data required to create a new role (as defined in RoleCreateDTO).
            Example Request (RoleCreateDTO):
            <code>
            {
                "roleName": "Editor"
            }
            </code>
            </param>
            <returns>
            Returns an <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> indicating the result of the role creation operation.
            </returns>
            <response code="200">
            Role created successfully. Returns a success message and the created role details.
            Example Response (Success):
            <code>
            {
                "success": true,
                "message": "Role created successfully.",
                "role": {
                    "id": "role-123",
                    "name": "Editor"
                }
            }
            </code>
            </response>
            <response code="400">
            Bad request. Returned when the provided model is invalid or role creation fails (e.g., role name already exists).
            Example Response (Invalid Model):
            <code>
            {
                "errors": {
                    "roleName": ["Role name is required."]
                }
            }
            </code>
            Example Response (Creation Failed):
            <code>
            {
                "success": false,
                "message": "Error creating role."
            }
            </code>
            </response>
            <response code="401">
            Unauthorized. Returned when the caller is not authenticated.
            </response>
            <response code="403">
            Forbidden. Returned when the caller is not an admin.
            </response>
            <response code="500">
            Server error. Returned when an unexpected error occurs on the server.
            Example Response (Server Error):
            <code>
            {
                "success": false,
                "message": "An error occurred while creating the role.",
                "error": "Database connection failed"
            }
            </code>
            </response>
        </member>
        <member name="M:HRSystem.Controllers.RoleController.GetRoles">
            <summary>
            Retrieves a list of all roles in the system.
            This endpoint allows an admin or authorized user to fetch all role details.
            </summary>
            <returns>
            Returns an <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> containing the list of roles or an error message.
            </returns>
            <response code="200">
            Roles retrieved successfully. Returns a success message and the list of roles.
            Example Response (Success):
            <code>
            {
                "success": true,
                "roles": [
                    {
                        "id": "role-123",
                        "name": "Admin"
                    },
                    {
                        "id": "role-456",
                        "name": "Editor"
                    },
                    {
                        "id": "role-789",
                        "name": "User"
                    }
                ]
            }
            </code>
            </response>
            <response code="404">
            Not found. Returned when no roles are found in the system.
            Example Response (Not Found):
            <code>
            {
                "success": false,
                "message": "No roles found."
            }
            </code>
            </response>
            <response code="401">
            Unauthorized. Returned when the caller is not authenticated.
            </response>
            <response code="403">
            Forbidden. Returned when the caller is not an admin.
            </response>
            <response code="500">
            Server error. Returned when an unexpected error occurs on the server.
            Example Response (Server Error):
            <code>
            {
                "success": false,
                "message": "An error occurred while retrieving roles.",
                "error": "Database connection failed"
            }
            </code>
            </response>
        </member>
        <member name="M:HRSystem.Controllers.RoleController.GetRoleById(System.String)">
            <summary>
            Retrieves a role by its ID.
            This endpoint allows an admin or authorized user to fetch the details of a specific role using its ID.
            </summary>
            <param name="id">The ID of the role to retrieve.</param>
            <returns>
            Returns an <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> containing the role details or an error message.
            </returns>
            <response code="200">
            Role retrieved successfully. Returns a success message and the role's details.
            Example Response (Success):
            <code>
            {
                "success": true,
                "role": {
                    "id": "role-123",
                    "name": "Admin"
                }
            }
            </code>
            </response>
            <response code="404">
            Not found. Returned when the role with the specified ID does not exist.
            Example Response (Not Found):
            <code>
            {
                "success": false,
                "message": "Role not found."
            }
            </code>
            </response>
            <response code="401">
            Unauthorized. Returned when the caller is not authenticated.
            </response>
            <response code="403">
            Forbidden. Returned when the caller is not an admin.
            </response>
            <response code="500">
            Server error. Returned when an unexpected error occurs on the server.
            Example Response (Server Error):
            <code>
            {
                "success": false,
                "message": "An error occurred while retrieving the role.",
                "error": "Database connection failed"
            }
            </code>
            </response>
        </member>
        <member name="M:HRSystem.Controllers.RoleController.Update(HRSystem.DTO.RoleDTOs.RoleUpdateDTO)">
            <summary>
            Updates an existing role in the system.
            This endpoint allows an admin or authorized user to update a role's details by providing the role ID and new name.
            </summary>
            <param name="model">
            The data required to update a role (as defined in RoleUpdateDTO).
            Example Request (RoleUpdateDTO):
            <code>
            {
                "roleId": "role-123",
                "roleName": "SeniorEditor"
            }
            </code>
            </param>
            <returns>
            Returns an <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> indicating the result of the role update operation.
            </returns>
            <response code="200">
            Role updated successfully. Returns a success message.
            Example Response (Success):
            <code>
            {
                "success": true,
                "message": "Role updated successfully."
            }
            </code>
            </response>
            <response code="400">
            Bad request. Returned when the provided model is invalid or role update fails (e.g., role not found or name already exists).
            Example Response (Invalid Model):
            <code>
            {
                "errors": {
                    "roleId": ["The role ID is required."],
                    "roleName": ["The role name is required."]
                }
            }
            </code>
            Example Response (Update Failed):
            <code>
            {
                "success": false,
                "message": "Error updating role."
            }
            </code>
            </response>
            <response code="401">
            Unauthorized. Returned when the caller is not authenticated.
            </response>
            <response code="403">
            Forbidden. Returned when the caller is not an admin.
            </response>
            <response code="500">
            Server error. Returned when an unexpected error occurs on the server.
            Example Response (Server Error):
            <code>
            {
                "success": false,
                "message": "An error occurred while updating the role.",
                "error": "Database connection failed"
            }
            </code>
            </response>
        </member>
        <member name="M:HRSystem.Controllers.RoleController.Delete(System.String)">
            <summary>
            Deletes a role by its ID.
            This endpoint allows an admin or authorized user to delete a role from the system using its ID.
            </summary>
            <param name="id">The ID of the role to delete.</param>
            <returns>
            Returns an <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> indicating the result of the delete operation.
            </returns>
            <response code="200">
            Role deleted successfully. Returns a success message.
            Example Response (Success):
            <code>
            {
                "success": true,
                "message": "Role deleted successfully."
            }
            </code>
            </response>
            <response code="400">
            Bad request. Returned when the role cannot be deleted (e.g., role is in use or has associated users).
            Example Response (Delete Failed):
            <code>
            {
                "success": false,
                "message": "Error deleting role. The role may be in use or has associated users."
            }
            </code>
            </response>
            <response code="404">
            Not found. Returned when the role with the specified ID does not exist.
            Example Response (Not Found):
            <code>
            {
                "success": false,
                "message": "Role not found."
            }
            </code>
            </response>
            <response code="401">
            Unauthorized. Returned when the caller is not authenticated.
            </response>
            <response code="403">
            Forbidden. Returned when the caller is not an admin.
            </response>
            <response code="500">
            Server error. Returned when an unexpected error occurs on the server.
            Example Response (Server Error):
            <code>
            {
                "success": false,
                "message": "An error occurred while deleting the role.",
                "error": "Database connection failed"
            }
            </code>
            </response>
        </member>
        <member name="M:HRSystem.Controllers.RoleController.AddUserToRole(System.String,System.String)">
            <summary>
            Assigns a role to a specific user in the system.
            This endpoint allows an admin to add a role to a user based on their unique identifier and the role name.
            </summary>
            <remarks>
            This endpoint requires admin privileges and expects a user ID and role name as route parameters.
            It returns a success message if the role is assigned successfully, or an error if the operation fails or an issue occurs.
            </remarks>
            <param name="userId">
            The unique identifier of the user to assign the role to (e.g., a GUID or string-based ID).
            </param>
            <param name="roleName">
            The name of the role to assign to the user (e.g., "Admin", "User").
            <para><strong>Example Request:</strong></para>
            <code>
            POST /Users/AddUserToRole/123e4567-e89b-12d3-a456-426614174000/User
            </code>
            </param>
            <returns>
            Returns an <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> containing the result of the role assignment process.
            On success, it returns HTTP 200 (OK) with a success message.
            On failure, it returns appropriate error codes with descriptive messages.
            </returns>
            <response code="200">
            Successfully added the user to the role. Returns a confirmation message.
            Example Response:
            <code>
            {
                "success": true,
                "message": "User successfully added to the 'User' role."
            }
            </code>
            </response>
            <response code="400">
            Bad Request. Returned when the input data is invalid or the operation fails.
            Example Response (Validation Error):
            <code>
            {
                "success": false,
                "message": "Invalid role assignment request.",
                "errors": [
                    "Role 'User' does not exist.",
                    "User ID is invalid."
                ]
            }
            </code>
            Example Response (Business Logic Error):
            <code>
            {
                "success": false,
                "message": "User is already assigned to the 'User' role.",
                "errors": []
            }
            </code>
            </response>
            <response code="401">
            Unauthorized. Returned when the caller is not authenticated.
            Example Response:
            <code>
            {
                "message": "Authentication required. Please provide a valid token."
            }
            </code>
            </response>
            <response code="403">
            Forbidden. Returned when the caller lacks admin privileges.
            Example Response:
            <code>
            {
                "message": "Access denied. Admin role required."
            }
            </code>
            </response>
            <response code="404">
            Not Found. Returned when the user or role does not exist.
            Example Response:
            <code>
            {
                "success": false,
                "message": "User or role not found.",
                "errors": []
            }
            </code>
            </response>
            <response code="500">
            Server Error. Returned when an unexpected error occurs during role assignment.
            Example Response (Generic Error):
            <code>
            {
                "success": false,
                "message": "An error occurred while adding the user to the role",
                "error": "Database connection failed"
            }
            </code>
            Example Response (Detailed Error):
            <code>
            {
                "success": false,
                "message": "An error occurred while adding the user to the role",
                "error": "Role assignment failed due to permission conflict",
                "timestamp": "2025-03-24T17:00:00Z"
            }
            </code>
            </response>
            <exception cref="T:System.Exception">Thrown when an unexpected error occurs (e.g., database failure). Caught and returned as a 500 response with error details.</exception>
        </member>
        <member name="M:HRSystem.Controllers.RoleController.DeleteUserFromRole(System.String,System.String)">
            <summary>
            Removes a role from a specific user in the system.
            This endpoint allows an admin to delete a role assignment for a user based on their unique identifier and the role name.
            </summary>
            <remarks>
            This endpoint requires admin privileges and expects a user ID and role name as route parameters.
            It returns a success message if the role is removed successfully, or an error if the operation fails or an issue occurs.
            </remarks>
            <param name="userId">
            The unique identifier of the user from whom the role will be removed (e.g., a GUID or string-based ID).
            </param>
            <param name="roleName">
            The name of the role to remove from the user (e.g., "Admin", "User").
            <para><strong>Example Request:</strong></para>
            <code>
            DELETE /users/123e4567-e89b-12d3-a456-426614174000/roles/User
            </code>
            </param>
            <returns>
            Returns an <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> containing the result of the role removal process.
            On success, it returns HTTP 200 (OK) with a success message.
            On failure, it returns appropriate error codes with descriptive messages.
            </returns>
            <response code="200">
            Successfully removed the user from the role. Returns a confirmation message.
            Example Response:
            <code>
            {
                "success": true,
                "message": "User successfully removed from the 'User' role."
            }
            </code>
            </response>
            <response code="400">
            Bad Request. Returned when the input data is invalid or the operation fails.
            Example Response (Validation Error):
            <code>
            {
                "success": false,
                "message": "Invalid role removal request.",
                "errors": [
                    "Role 'User' does not exist.",
                    "User ID is invalid."
                ]
            }
            </code>
            Example Response (Business Logic Error):
            <code>
            {
                "success": false,
                "message": "User is not assigned to the 'User' role.",
                "errors": []
            }
            </code>
            </response>
            <response code="401">
            Unauthorized. Returned when the caller is not authenticated.
            Example Response:
            <code>
            {
                "message": "Authentication required. Please provide a valid token."
            }
            </code>
            </response>
            <response code="403">
            Forbidden. Returned when the caller lacks admin privileges.
            Example Response:
            <code>
            {
                "message": "Access denied. Admin role required."
            }
            </code>
            </response>
            <response code="404">
            Not Found. Returned when the user or role does not exist.
            Example Response:
            <code>
            {
                "success": false,
                "message": "User or role not found.",
                "errors": []
            }
            </code>
            </response>
            <response code="500">
            Server Error. Returned when an unexpected error occurs during role removal.
            Example Response (Generic Error):
            <code>
            {
                "success": false,
                "message": "An error occurred while removing the user from the role",
                "error": "Database connection failed"
            }
            </code>
            Example Response (Detailed Error):
            <code>
            {
                "success": false,
                "message": "An error occurred while removing the user from the role",
                "error": "Role removal failed due to permission conflict",
                "timestamp": "2025-03-24T17:15:00Z"
            }
            </code>
            </response>
            <exception cref="T:System.Exception">Thrown when an unexpected error occurs (e.g., database failure). Caught and returned as a 500 response with error details.</exception>
        </member>
        <member name="M:HRSystem.Controllers.ShiftsController.CreateShift(HRSystem.DTO.ShiftDTOs.AddShiftDTO)">
            <summary>
            Creates a new shift for an employee.
            </summary>
            <param name="shiftDto">The data transfer object containing the shift details to create.</param>
            <returns>
            Returns the created shift details if successful, or an error message if the operation fails.
            </returns>
            <remarks>
            This endpoint creates a new shift and requires Admin role authorization. The request body must contain valid shift details.
            
            Example Request:
            ```json
            {
              "startTime": "09:00",
              "endTime": "17:00",
              "employeeId": "12345"
            }
            ```
            </remarks>
            <response code="201">
            Returns the created shift details when the request is successful.
            ```json
            {
              "startTime": "09:00",
              "endTime": "17:00",
              "employeeId": "12345"
            }
            ```
            </response>
            <response code="400">
            Returned when the request model is invalid or the shift creation fails.
            ```json
            "Failed to create shift. Please check the provided data."
            ```
            </response>
            <response code="401">
            Returned when the user is not authenticated or lacks Admin role authorization.
            ```json
            {
              "message": "Unauthorized"
            }
            ```
            </response>
        </member>
        <member name="M:HRSystem.Controllers.ShiftsController.UpdateShift(HRSystem.DTO.ShiftDTOs.ShiftDTO)">
            <summary>
            Updates an existing shift in the system.
            </summary>
            <param name="shiftDto">The data transfer object containing the updated shift details.</param>
            <returns>
            Returns a success message if the shift is updated, or an error message if the shift is not found or the operation fails.
            </returns>
            <remarks>
            This endpoint updates a shift and requires Admin role authorization. The request body must contain valid shift details.
            
            Example Request:
            ```json
            {
              "id": 1,
              "startTime": "10:00",
              "endTime": "18:00",
              "employeeId": "12345"
            }
            ```
            </remarks>
            <response code="200">
            Returns a success message when the shift is updated successfully.
            ```json
            "Shift updated successfully."
            ```
            </response>
            <response code="400">
            Returned when the request model is invalid.
            ```json
            {
              "startTime": [
                "The StartTime field is required."
              ]
            }
            ```
            </response>
            <response code="401">
            Returned when the user is not authenticated or lacks Admin role authorization.
            ```json
            {
              "message": "Unauthorized"
            }
            ```
            </response>
            <response code="404">
            Returned when the shift is not found or the update fails.
            ```json
            "Shift not found or update failed."
            ```
            </response>
        </member>
        <member name="M:HRSystem.Controllers.ShiftsController.DeleteShift(HRSystem.DTO.ShiftDTOs.DeleteShiftDTO)">
            <summary>
            Deletes a shift for an employee.
            </summary>
            <param name="dto">The data transfer object containing the shift ID and employee ID to delete.</param>
            <returns>
            Returns a success message if the shift is deleted, or an error message if the shift is not found or the operation fails.
            </returns>
            <remarks>
            This endpoint deletes a shift and requires Admin role authorization. The request body must contain valid shift and employee IDs.
            
            Example Request:
            ```json
            {
              "shiftId": 1,
              "employeeId": "12345"
            }
            ```
            </remarks>
            <response code="200">
            Returns a success message when the shift is deleted successfully.
            ```json
            "Shift deleted successfully."
            ```
            </response>
            <response code="400">
            Returned when the request model is invalid.
            ```json
            {
              "shiftId": [
                "The ShiftId field is required."
              ]
            }
            ```
            </response>
            <response code="401">
            Returned when the user is not authenticated or lacks Admin role authorization.
            ```json
            {
              "message": "Unauthorized"
            }
            ```
            </response>
            <response code="404">
            Returned when the shift is not found or deletion fails.
            ```json
            "Shift with ID 1 for EmployeeId 12345 not found or deletion failed."
            ```
            </response>
        </member>
        <member name="M:HRSystem.Controllers.ShiftsController.GetShiftsByEmployeeId(System.String)">
            <summary>
            Retrieves all shifts for a specific employee by their ID.
            </summary>
            <param name="employeeId">The unique identifier of the employee whose shifts are to be retrieved.</param>
            <returns>
            Returns a list of shifts if found, or an error message if no shifts exist or the operation fails.
            </returns>
            <remarks>
            This endpoint retrieves shifts for an employee and requires Admin role authorization.
            </remarks>
            <response code="200">
            Returns a list of shifts when the request is successful.
            ```json
            [
              {
                "id": 1,
                "startTime": "09:00",
                "endTime": "17:00",
                "employeeId": "12345"
              }
            ]
            ```
            </response>
            <response code="400">
            Returned when the employee ID is empty or invalid.
            ```json
            "EmployeeId cannot be empty."
            ```
            </response>
            <response code="401">
            Returned when the user is not authenticated or lacks Admin role authorization.
            ```json
            {
              "message": "Unauthorized"
            }
            ```
            </response>
            <response code="404">
            Returned when no shifts are found for the specified employee ID.
            ```json
            "No shifts found for EmployeeId 12345."
            ```
            </response>
        </member>
        <member name="M:HRSystem.Controllers.UsersController.CreateUser(HRSystem.DTO.UserDTOs.CreateUserDTO)">
            <summary>
            Creates a new user in the system.
            This endpoint allows an admin to register a new user by providing necessary details such as name, email, and other personal information.
            </summary>
            <remarks>
            This endpoint requires admin privileges and expects a valid JSON payload conforming to the <see cref="T:HRSystem.DTO.UserDTOs.CreateUserDTO"/> structure.
            It performs validation on the input data and returns an authentication response with user details and a token upon success.
            </remarks>
            <param name="model">
            The user data to create, provided in the request body as a.
            /// <para><strong>Example Request:</strong></para>
            <code>
            POST /Users/Create
            {
                "name": "John Doe",
                "email": "john.doe@example.com",
                "address": "123 Main St, Springfield",
                "dateOfBarth": "1990-05-15T00:00:00",
                "phoneNumber": "+1-555-123-4567",
                "userName": "johndoe",
                "nationalid": "987654321",
                "salary": 50000.75,
                "shiftType": "Morning",
                "gender": "Male",
                "dateOfWork": "2025-01-01T00:00:00",
                "password": "SecurePass123!"
            }
            </code>
            </param>
            <returns>
            Returns an <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> containing the result of the user creation process.
            On success, it returns HTTP 200 (OK) with user details and an authentication token.
            On failure, it returns appropriate error codes with descriptive messages.
            </returns>
            <response code="200">
            Successfully created the user. Returns user details and an authentication token.
            Example Response:
            <code>
            {
                "message": "User created successfully",
                "user": {
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "name": "John Doe",
                    "email": "john.doe@example.com",
                    "userName": "johndoe",
                    "phoneNumber": "+1-555-123-4567",
                    "address": "123 Main St, Springfield",
                    "nationalid": "987654321",
                    "salary": 50000.75,
                    "shiftType": "Morning",
                    "gender": "Male",
                    "dateOfWork": "2025-01-01",
                    "dateOfBarth": "1990-05-15",
                    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                    "roles": ["User"]
                }
            }
            </code>
            </response>
            <response code="400">
            Bad Request. Returned when the input data is invalid or fails validation.
            Example Response (Validation Error):
            <code>
            {
                "name": ["Name is required."],
                "email": ["Invalid email format."]
            }
            </code>
            Example Response (Business Logic Error):
            <code>
            {
                "message": "Email already exists in the system."
            }
            </code>
            </response>
            <response code="401">
            Unauthorized. Returned when the caller is not authenticated.
            Example Response:
            <code>
            {
                "message": "Authentication required. Please provide a valid token."
            }
            </code>
            </response>
            <response code="403">
            Forbidden. Returned when the caller lacks admin privileges.
            Example Response:
            <code>
            {
                "message": "Access denied. Admin role required."
            }
            </code>
            </response>
            <response code="500">
            Server Error. Returned when an unexpected error occurs during user creation.
            Example Response (Generic Error):
            <code>
            {
                "message": "An error occurred while creating the user",
                "error": "Database connection failed"
            }
            </code>
            Example Response (Detailed Error):
            <code>
            {
                "message": "An error occurred while creating the user",
                "error": "User creation failed due to duplicate National ID",
                "timestamp": "2025-03-24T14:30:00Z"
            }
            </code>
            </response>
            <exception cref="T:System.Exception">Thrown when an unexpected error occurs (e.g., database failure). Caught and returned as a 500 response with error details.</exception>
        </member>
        <member name="M:HRSystem.Controllers.UsersController.GetUsers">
            <summary>
            Retrieves a list of all users in the system.
            This endpoint allows an admin to fetch all registered users for administrative purposes.
            </summary>
            <remarks>
            This is a GET endpoint that requires admin privileges. It returns a collection of user data if available, or an appropriate error message if no users exist or an issue occurs.
            No parameters are required as it fetches all users indiscriminately.
            </remarks>
            <returns>
            Returns an <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> containing the result of the user retrieval process.
            On success, it returns HTTP 200 (OK) with a list of users.
            On failure, it returns appropriate error codes with descriptive messages.
            </returns>
            <response code="200">
            Successfully retrieved the list of users.
            Example Response (Multiple Users):
            <code>
            {
                "success": true,
                "data": [
                    {
                        "id": "123e4567-e89b-12d3-a456-426614174000",
                        "name": "John Doe",
                        "email": "john.doe@example.com",
                        "userName": "johndoe",
                        "phoneNumber": "+1-555-123-4567",
                        "address": "123 Main St, Springfield",
                        "nationalId": "987654321",
                        "salary": 50000.75,
                        "shiftType": "Morning",
                        "gender": "Male",
                        "dateOfWork": "2025-01-01",
                        "dateOfBirth": "1990-05-15"
                    },
                    {
                        "id": "987fcdeb-12ab-34cd-e567-890123456789",
                        "name": "Jane Smith",
                        "email": "jane.smith@example.com",
                        "userName": "janesmith",
                        "phoneNumber": "+1-555-987-6543",
                        "address": "456 Oak Ave, Riverside",
                        "nationalId": "123456789",
                        "salary": 60000.00,
                        "shiftType": "Evening",
                        "gender": "Female",
                        "dateOfWork": "2024-11-15",
                        "dateOfBirth": "1988-09-22"
                    }
                ]
            }
            </code>
            Example Response (Single User):
            <code>
            {
                "success": true,
                "data": [
                    {
                        "id": "123e4567-e89b-12d3-a456-426614174000",
                        "name": "John Doe",
                        "email": "john.doe@example.com",
                        "userName": "johndoe",
                        "phoneNumber": "+1-555-123-4567",
                        "address": "123 Main St, Springfield",
                        "nationalId": "987654321",
                        "salary": 50000.75,
                        "shiftType": "Morning",
                        "gender": "Male",
                        "dateOfWork": "2025-01-01",
                        "dateOfBirth": "1990-05-15"
                    }
                ]
            }
            </code>
            </response>
            <response code="401">
            Unauthorized. Returned when the caller is not authenticated.
            Example Response:
            <code>
            {
                "message": "Authentication required. Please provide a valid token."
            }
            </code>
            </response>
            <response code="403">
            Forbidden. Returned when the caller lacks admin privileges.
            Example Response:
            <code>
            {
                "message": "Access denied. Admin role required."
            }
            </code>
            </response>
            <response code="404">
            Not Found. Returned when no users exist in the system.
            Example Response:
            <code>
            {
                "success": false,
                "message": "No users found."
            }
            </code>
            </response>
            <response code="500">
            Server Error. Returned when an unexpected error occurs during retrieval.
            Example Response (Generic Error):
            <code>
            {
                "success": false,
                "message": "An error occurred while retrieving users.",
                "error": "Database connection failed"
            }
            </code>
            Example Response (Detailed Error):
            <code>
            {
                "success": false,
                "message": "An error occurred while retrieving users.",
                "error": "Timeout occurred while querying the database",
                "timestamp": "2025-03-24T15:45:00Z"
            }
            </code>
            </response>
            <exception cref="T:System.Exception">Thrown when an unexpected error occurs (e.g., database failure). Caught and returned as a 500 response with error details.</exception>
        </member>
        <member name="M:HRSystem.Controllers.UsersController.GetById(System.String)">
            <summary>
            Retrieves a user by their ID.
            </summary>
            <param name="id">The unique identifier of the user to retrieve.</param>
            <returns>
            Returns the user details if found, or an error message if the user is not found or the operation fails.
            </returns>
            <remarks>
            This endpoint retrieves a user by ID and requires Admin or User role authorization.
            </remarks>
            <response code="200">
            Returns the user details when the request is successful.
            ```json
            {
              "success": true,
              "message": "User retrieved successfully.",
              "data": {
                "id": "12345",
                "name": "John Doe",
                "email": "john@example.com"
              }
            }
            ```
            </response>
            <response code="401">
            Returned when the user is not authenticated or lacks required role authorization.
            ```json
            {
              "message": "Unauthorized"
            }
            ```
            </response>
            <response code="404">
            Returned when the user with the specified ID is not found.
            ```json
            {
              "success": false,
              "message": "User with ID '12345' not found."
            }
            ```
            </response>
            <response code="500">
            Returned when an unexpected server error occurs during processing.
            ```json
            {
              "success": false,
              "message": "An error occurred while retrieving the user.",
              "error": "Exception details here"
            }
            ```
            </response>
        </member>
        <member name="M:HRSystem.Controllers.UsersController.Edit(HRSystem.DTO.UserDTOs.UpdateUserDTO)">
            <summary>
            Updates an existing user in the system.
            </summary>
            <param name="model">The data transfer object containing the updated user details.</param>
            <returns>
            Returns a success message if the user is updated, or an error message if the user is not found or the operation fails.
            </returns>
            <remarks>
            This endpoint updates a user and requires Admin role authorization. The request body must contain valid user details.
            
            Example Request:
            ```json
            {
              "id": "12345",
              "name": "Updated John Doe",
              "email": "john.updated@example.com"
            }
            ```
            </remarks>
            <response code="200">
            Returns a success message when the user is updated successfully.
            ```json
            {
              "success": true,
              "message": "User updated successfully."
            }
            ```
            </response>
            <response code="400">
            Returned when the request model is invalid.
            ```json
            {
              "success": false,
              "message": "Invalid user data provided.",
              "errors": ["The Email field is required."]
            }
            ```
            </response>
            <response code="401">
            Returned when the user is not authenticated or lacks Admin role authorization.
            ```json
            {
              "message": "Unauthorized"
            }
            ```
            </response>
            <response code="404">
            Returned when the user with the specified ID is not found or cannot be updated.
            ```json
            {
              "success": false,
              "message": "User with ID '12345' not found or could not be updated."
            }
            ```
            </response>
            <response code="500">
            Returned when an unexpected server error occurs during processing.
            ```json
            {
              "success": false,
              "message": "An error occurred while updating the user.",
              "error": "Exception details here"
            }
            ```
            </response>
        </member>
        <member name="M:HRSystem.Controllers.UsersController.DeleteUser(System.String)">
            <summary>
            Deletes a user from the system by their ID.
            </summary>
            <param name="id">The unique identifier of the user to delete.</param>
            <returns>
            Returns a success message if the user is deleted, or an error message if the user is not found or the operation fails.
            </returns>
            <remarks>
            This endpoint deletes a user and requires Admin or User role authorization.
            </remarks>
            <response code="200">
            Returns a success message when the user is deleted successfully.
            ```json
            {
              "success": true,
              "message": "User and associated records deleted successfully."
            }
            ```
            </response>
            <response code="401">
            Returned when the user is not authenticated or lacks required role authorization.
            ```json
            {
              "message": "Unauthorized"
            }
            ```
            </response>
            <response code="404">
            Returned when the user with the specified ID is not found or cannot be deleted.
            ```json
            {
              "success": false,
              "message": "User with ID '12345' not found or could not be deleted."
            }
            ```
            </response>
            <response code="500">
            Returned when an unexpected server error occurs during processing.
            ```json
            {
              "success": false,
              "message": "An error occurred while deleting the user.",
              "error": "Exception details here"
            }
            ```
            </response>
        </member>
        <member name="T:HRSystem.Migrations.initialMigration">
            <inheritdoc />
        </member>
        <member name="M:HRSystem.Migrations.initialMigration.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:HRSystem.Migrations.initialMigration.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:HRSystem.Migrations.initialMigration.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:HRSystem.Migrations.ChangeDataTypesOfLocationFromStringToDouble">
            <inheritdoc />
        </member>
        <member name="M:HRSystem.Migrations.ChangeDataTypesOfLocationFromStringToDouble.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:HRSystem.Migrations.ChangeDataTypesOfLocationFromStringToDouble.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:HRSystem.Migrations.ChangeDataTypesOfLocationFromStringToDouble.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:HRSystem.Migrations.removeReduisMigration">
            <inheritdoc />
        </member>
        <member name="M:HRSystem.Migrations.removeReduisMigration.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:HRSystem.Migrations.removeReduisMigration.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:HRSystem.Migrations.removeReduisMigration.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:HRSystem.Migrations.addShiftType">
            <inheritdoc />
        </member>
        <member name="M:HRSystem.Migrations.addShiftType.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:HRSystem.Migrations.addShiftType.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:HRSystem.Migrations.addShiftType.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:HRSystem.Migrations.AddEmployeeVacations">
            <inheritdoc />
        </member>
        <member name="M:HRSystem.Migrations.AddEmployeeVacations.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:HRSystem.Migrations.AddEmployeeVacations.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:HRSystem.Migrations.AddEmployeeVacations.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:HRSystem.Migrations.AddNotification">
            <inheritdoc />
        </member>
        <member name="M:HRSystem.Migrations.AddNotification.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:HRSystem.Migrations.AddNotification.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:HRSystem.Migrations.AddNotification.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:HRSystem.Migrations.V5">
            <inheritdoc />
        </member>
        <member name="M:HRSystem.Migrations.V5.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:HRSystem.Migrations.V5.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:HRSystem.Migrations.V5.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:HRSystem.Migrations.v6">
            <inheritdoc />
        </member>
        <member name="M:HRSystem.Migrations.v6.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:HRSystem.Migrations.v6.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:HRSystem.Migrations.v6.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:HRSystem.Migrations.v7">
            <inheritdoc />
        </member>
        <member name="M:HRSystem.Migrations.v7.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:HRSystem.Migrations.v7.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:HRSystem.Migrations.v7.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:HRSystem.Migrations.v8">
            <inheritdoc />
        </member>
        <member name="M:HRSystem.Migrations.v8.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:HRSystem.Migrations.v8.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:HRSystem.Migrations.v8.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
    </members>
</doc>
